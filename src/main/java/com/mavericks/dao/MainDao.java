package com.mavericks.dao;

import com.mavericks.model.Customer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;

@Repository
public class MainDao {
   @Autowired
   private DataSource ds;

   public int registerCustomer(Customer c ){
        Connection conn=null;
        try {
             conn= ds.getConnection();
            PreparedStatement ps =conn.prepareStatement("insert into userdetails2(name,email,address,contact,pwd,status) values \n" +
                                    "(?,?,?,?,encode(?,'pass'),?);", Statement.RETURN_GENERATED_KEYS);
            ps.setString(1,c.getName());
            ps.setString(2,c.getEmail());
            ps.setString(3,c.getAddress());
            ps.setString(4,c.getContactNumber());
            ps.setString(5,c.getPswd());
            ps.setString(6,"Active");
             int rowsAffected=ps.executeUpdate();
            if(rowsAffected> 0) {
                ResultSet tableKeys = ps.getGeneratedKeys();
                tableKeys.next();
                int autoGeneratedID = tableKeys.getInt(1);
                return autoGeneratedID;
            }
            return 0;
    } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e ){
        e.printStackTrace();
        }

   finally{
            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
       return 0;
    }


    public Customer loginCustomer(Customer c){
               Connection conn=null;
        try {
            conn=ds.getConnection();
           PreparedStatement ps=conn.prepareStatement("select name,email,address,contact,regid,decode(pwd,'pass') from userdetails2 where regid=? and pwd=encode(?,'pass') and status='active'");
           ps.setInt(1,c.getRegistrationId());
           ps.setString(2,c.getPswd());
           ResultSet rs=ps.executeQuery();
           Customer customer=null;
            while(rs.next()){

                customer=new Customer();
                customer.setName(rs.getString(1));
                customer.setAddress(rs.getString(3));
                customer.setContactNumber(rs.getString(4));
                customer.setEmail(rs.getString(2));
                customer.setRegistrationId(rs.getInt(5));
                customer.setPswd(rs.getString(6));
            }
            return customer;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {

            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;

    }

    public int updateCustomer(Customer c){
           Connection conn=null;

        try {
            conn=ds.getConnection();
            PreparedStatement ps=conn.prepareStatement("update userdetails2 set name=?,email=?,address=?,contact=?,pwd=encode(?,'pass') where regid=?");
            ps.setString(1,c.getName());
            ps.setString(2,c.getEmail());
            ps.setString(3,c.getAddress());
            ps.setString(4,c.getContactNumber());
            ps.setString(5,c.getPswd());
            ps.setInt(6,c.getRegistrationId());
           int rows= ps.executeUpdate();
           return rows;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return 0;
    }

    public ArrayList<Customer> getCustomers(){
                 Connection conn=null;
        try {
            conn=ds.getConnection();
            PreparedStatement ps=conn.prepareStatement("select regid,name,email,address,contact,status from userdetails2");

            ResultSet rs=ps.executeQuery();
            ArrayList<Customer> customers=new ArrayList<Customer>();
            while(rs.next()){
                      Customer c=new Customer();
                     c.setName(rs.getString(2));
                     c.setEmail(rs.getString(3));
                     c.setAddress(rs.getString(4));
                     c.setContactNumber(rs.getString(5));
                     c.setStatus(rs.getString(6));
                     c.setRegistrationId(rs.getInt(1));
                     customers.add(c);
            }
            return customers;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    public int softDeleteCustomer(int regNumber){
         Connection conn=null;
        try {
            conn=ds.getConnection();
             PreparedStatement ps=conn.prepareStatement("update userdetails2 set status='inactive' where regid=?");
             ps.setInt(1,regNumber);
          int rows= ps.executeUpdate();
          return rows;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;

    }

    public int harddeleteCustomer(int regNumber){

        Connection conn=null;
        try {
            conn=ds.getConnection();
            PreparedStatement ps=conn.prepareStatement("DELETE FROM userdetails2 WHERE regid=?");
            ps.setInt(1,regNumber);
            int rows= ps.executeUpdate();
            return rows;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(conn!=null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return -1;



    }



    };
